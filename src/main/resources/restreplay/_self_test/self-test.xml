<?xml version="1.0" encoding="UTF-8"?>
<restReplay>
    <protoHostPort>http://localhost:${SELFTEST_PORT}</protoHostPort>


    <testGroup ID="login" autoDeletePOSTS="false">
        <test ID="selftestToken">
            <method>GET</method>
            <uri>/tagonomy?mock=token</uri>
        </test>
    </testGroup>


    <testGroup ID="selftestGroup" autoDeletePOSTS="false">
        <vars>
            <var ID="SELFTEST_SERVER">http://localhost:${SELFTEST_PORT}</var>
        </vars>
        <test ID="selftestToken">
            <method>GET</method>
            <uri>/tagonomy?mock=token</uri>
        </test>
        <test ID="selftestExpectedCodes">
            <expected>
                 <code range="3x"/>
                 <code range="1x"/>
                 <code range="2x"></code>
            </expected>
            <method>GET</method>
            <uri>${SELFTEST_SERVER}/tagonomy?mock=true&amp;foo=${TOKEN_ID}</uri>
            <vars>
                <var ID="TOKEN_ID">${selftestToken.got("//status")}</var>
            </vars>
        </test>
        <test ID="selftestUseMutator">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/content-mutator-test.json</filename>
            <mutator type="ExcludeFields">
                <expected>
                    <code range="200">*</code>
                    <code range="200-299">numOfDrafts</code>
                    <code range="400-499,500-599">book_id, course_id</code>
                </expected>
            </mutator>
        </test>
        <test ID="selftestUseToken">
            <method>GET</method>
            <uri>/tagonomy?mock=true&amp;name=selftestUseToken</uri>
            <headers>
                <header name="x-authorization">${selftestToken.got("//data")}</header>
                <header name="x-method">${selftestToken.method}</header>
            </headers>
        </test>
        <test ID="selftestUseTokenPOST">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-token-post.json</filename>
            <vars>
                <var ID="TOKEN">${selftestToken.got("//data")}</var>
            </vars>
        </test>
        <test ID="selftestUseTokenPUT">
            <method>PUT</method>
            <uri>/tagonomy?mock=true&amp;mutation=${this.mutation}</uri>
            <filename>_self_test/content-mutator-test.json</filename>
            <mutator type="ExcludeFields">
                <expected>
                    <code range="4xx">*</code>
                </expected>
            </mutator>
        </test>
        <test ID="selftestUseTokenDELETE">
            <method>DELETE</method>
            <uri>/tagonomy?mock=true</uri>
        </test>
        <test ID="selftest501">
            <expected>
                <code range="501"/>
            </expected>
            <method>PUT</method>
            <uri>/tagonomy?mock=501</uri>
            <filename>_self_test/content-mutator-test.json</filename>
        </test>
        <test ID="selftestScriptTest">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-mutator.json</filename>
            <vars>
                <var ID="TOKEN">FOOTOKEN</var>
            </vars>
            <exports>
                <vars>
                    <comment>this stuff is JEXL, Java Expression Language: org.apache.commons.jexl2, and it is basically java, but has the var keyword.</comment>
                    <var ID="GregorianDate"><![CDATA[${
                        if (kit != null) {
                            var ts = kit.gregorian.timestampUTC();
                            kit.out.println('');
                            kit.out.println('    ==> Running test script, in selftest.xml:selftestGroup:selftestScriptTest at '+ts);
                            kit.out.println('');
                            return 'zts:'+ts;
                        }
                        return "kit not defined in selftestScriptTest";
                    }]]></var>
                </vars>
            </exports>
        </test>
        <test ID="selftestUseValidator">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-number-post.json</filename>
            <vars>
                <var ID="COUNT">3</var>
            </vars>
            <response>
                <validator lang="javascript">_self_test/res/selftest.validator.js</validator>
            </response>
        </test>
       <test ID="getOrders">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-number-post.json</filename>
           <vars>
               <var ID="COUNT">4</var>
           </vars>
           <response>
                <validator lang="javascript">_self_test/res/getOrders.validator.js</validator>
            </response>
        </test>

        <test ID="deleteOrders" loop="${size(getOrders.ORDER_IDS)}">
            <method>GET</method>
            <uri>/tagonomy?mock=${getOrders.ORDER_IDS[this.LoopIndex]}</uri>
        </test>

        <test ID="selftestUseValidatorExpectErrors">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-number-post.json</filename>
            <vars>
                <var ID="COUNT">3</var>
            </vars>
            <response>
                <validator lang="javascript">_self_test/res/selftest-with-validator-errors.validator.js</validator>
            </response>
        </test> 
        <test ID="selftestEmptyExpectedResponseFile">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-number-post.json</filename>
            <vars>
                <var ID="COUNT">3</var>
            </vars>
            <response>
                <filename>_self_test/res/empty-file.json</filename>
            </response>
        </test>
        <test ID="selftestUseVarMutator">
            <method>PUT</method>
            <expected>
                <code range="202" />
                <comment>because emptyMutationResponseCode=202 is sent in uri.
                         Each non-empty mutation (child test) will return a 406, hardcoded on the server side of this test,
                         because typical use case is seeing if removing fields makes the service complain.</comment>
            </expected>
            <uri>http://localhost:${SELFTEST_PORT}/tagonomy?mock=true&amp;mutation=${this.mutation}&amp;emptyMutationResponseCode=202</uri>
            <filename>_self_test/var-mutator-test.json</filename>
            <vars>
                <var ID="DAYS">${24*60*60*1000}</var>
                <var ID="BASE_DATE">${tools.now()}</var>
                <var ID="DUE_DATE_MILLIS">${BASE_DATE +0 * DAYS}</var>
                <var ID="DueDate">Due ${kit.dates.getMonthName(BASE_DATE)} ${kit.dates.getDayOfMonth(BASE_DATE)}</var>
                <var ID="VarTestMessage">Base message set here as default (selftestUseVarMutator).</var>
            </vars>
            <mutator type="VarMutator">
                <expected>
                    <code range="406" />
                </expected>
                <vars ID="0">
                    <var idbase="DUE_DATE_MILLIS">${BASE_DATE +1 * DAYS}</var>
                    <var idbase="VarTestMessage">${this.testID} set in mutation ID=0.</var>
                </vars>
                <vars ID="1">
                    <var idbase="DUE_DATE_MILLIS">${BASE_DATE +3 * DAYS}</var>
                    <var idbase="VarTestMessage">${this.testID} set in mutation ID=1.</var>
                </vars>
            </mutator>
        </test>
    </testGroup>


    <testGroup ID="testMutatorExpectedCodes"  autoDeletePOSTS="false">
        <test ID="varMutatorExpectedCodes">
            <method>PUT</method>
            <uri>/tagonomy?mock=true&amp;mutation=${this.mutation}&amp;emptyMutationResponseCode=401</uri>
            <filename>_self_test/var-mutator-test.json</filename>
            <expected>
                <code range="401">*</code>
            </expected>
            <vars>
                <var ID="DAYS">${24*60*60*1000}</var>
                <var ID="BASE_DATE">${tools.now()}</var>
                <var ID="DUE_DATE_MILLIS">${BASE_DATE +0 * DAYS}</var>
                <var ID="FOOBAR">${this.testID}</var>
                <var ID="DueDate2">Due ${BASE_DATE} -basedate</var>
                <var ID="DueDate">Due ${kit.dates.getMonthName(BASE_DATE)} ${kit.dates.getDayOfMonth(BASE_DATE)}</var>
                <var ID="VarTestMessage">Base message set here as default (varMutatorExpectedCodes).</var>
            </vars>
            <mutator type="VarMutator">
                <expected>
                    <code range="406">*</code>
                </expected>
                <vars ID="0">
                    <var idbase="DUE_DATE_MILLIS">${BASE_DATE +1 * DAYS}</var>
                    <var idbase="FOOBAR">${this.testID} set in 0.</var>
                </vars>
                <vars ID="1">
                    <var idbase="DUE_DATE_MILLIS">${BASE_DATE +2 * DAYS}</var>
                    <var idbase="FOOBAR">${this.testID + ' mutator index: ' + this.mutator.getIndex() }</var>
                </vars>
            </mutator>
        </test>
        <test ID="ExcludeFieldsMutatorExpectedCodes">
            <method>PUT</method>
            <uri>/tagonomy?mock=true&amp;mutation=${this.mutation}</uri>
            <filename>_self_test/selftest-mutator.json</filename>
            <expected>
                <code range="2x"/>
            </expected>
            <vars>
                <var ID="TOKEN">FOOTOKEN</var>
                <var ID="mutation">${this.mutation}</var>
            </vars>
            <mutator type="ExcludeFields">
                <expected>
                    <code range="202">no_optionalField</code>
                    <code range="4x">*</code>
                </expected>
            </mutator>
        </test>
    </testGroup>




    <testGroup ID="debug"  autoDeletePOSTS="false">
        <test ID="selftestUseVarMutator">
            <method>PUT</method>
            <uri>/tagonomy?mock=true&amp;mutation=${this.mutation}&amp;forceCode=300</uri>
            <filename>_self_test/var-mutator-test.json</filename>
            <vars>
                <var ID="DAYS">${24*60*60*1000}</var>
                <var ID="BASE_DATE">${tools.now()}</var>
                <var ID="DUE_DATE_MILLIS">${BASE_DATE +0 * DAYS}</var>
                <var ID="FOOBAR">${this.testID}</var>
                <var ID="DueDate2">Due ${BASE_DATE} -basedate</var>
                <var ID="DueDate">Due ${kit.dates.getMonthName(BASE_DATE)} ${kit.dates.getDayOfMonth(BASE_DATE)}</var>
            </vars>
            <mutator type="VarMutator">
                <expected>
                    <code range="4xx">*</code>
                </expected>
                <vars ID="0">
                    <var idbase="DUE_DATE_MILLIS">${BASE_DATE +1 * DAYS}</var>
                    <var idbase="FOOBAR">${this.testID} set in 0.</var>
                </vars>
                <vars ID="1">
                    <var idbase="DUE_DATE_MILLIS">${BASE_DATE +2 * DAYS}</var>
                    <var idbase="FOOBAR">${this.testID + ' mutator index: ' + this.mutator.getIndex() }</var>
                </vars>
                <vars ID="2">
                    <var idbase="DUE_DATE_MILLIS">${BASE_DATE +3 * DAYS}</var>
                    <var idbase="FOOBAR">${this.testID + ' mutator index: ' + this.mutator.getIndex() }</var>
                </vars>
                <vars ID="3">
                    <var idbase="FOOBAR">${this.testID + ' mutator index: ' + this.mutator.getIndex() }</var>
                </vars>
            </mutator>
        </test>
    </testGroup>

    <testGroup ID="debugMutators2"  autoDeletePOSTS="false">
        <test ID="selftestUseTokenPUT">
            <method>PUT</method>
            <uri>/tagonomy?mock=true&amp;mutation=${this.mutation}</uri>
            <filename>_self_test/selftest-mutator.json</filename>
            <vars>
                <var ID="TOKEN">FOOTOKEN</var>
                <var ID="mutation">${this.mutation}</var>
            </vars>
            <mutator type="ExcludeFields">
                <expected>
                    <code range="5xx">mutation</code>
                    <code range="2x">*</code>
                </expected>
            </mutator>
        </test>
    </testGroup>

    <testGroup ID="bugs"  autoDeletePOSTS="false">
        <test ID="selftestUseTokenPUTbugs">
            <!-- This case causes errors to happen in the mutated child tests, but reading the json response borks the
                 parent so it doesn't display correctly, and the children seem like top-level tests.
                 Trace this to the code that breaks on the error and trap the error correctly.
            -->
            <method>PUT</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-mutator.json</filename>
            <mutator type="ExcludeFields">
                <expected>
                    <code range="4xx">*</code>
                </expected>
            </mutator>
            <exports>
                <vars>
                    <var ID="plainString">${tools.encodeURLString("and these are my data 1 2 3 + % * left-brace:\u007B right-brace:\u007D ")}</var>
                    <var ID="encodedData2">${tools.encodeURLString(this.got("//data"))}</var>
                    <var ID="data">${this.got("//data")}</var>
                    <var ID="result">This case (result/this) is borked: ${result.got("//data")}</var>
                    <var ID="returnTest">${var d = this.got("//data"); if (d.length()>0) {return true;} else {return false;}}</var>
                </vars>
            </exports>
        </test>
        <test ID="selftestUseData"  autoDeletePOSTS="false">
            <method>GET</method>
            <uri>/tagonomy?mock=token&amp;data=${tools.encodeURLString(selftestUseTokenPUTbugs.result)}</uri>
        </test>

        <test ID="selftestUseToken">
            <!-- this one works above, but had this warning comment.  If you need to look into it, the case and the comment are here.-->
            <method>GET</method>
            <uri>/tagonomy?mock=true&amp;name=selftestUseToken</uri>
            <headers>
                <header name="x-authorization">${selftestToken.got("//data")}</header>
                <header name="x-method">${selftestToken.method}</header>
            </headers>
            <!--This causes a warning.  And it breaks auto delete with the erroneous url.
            Keeping this here for development of two error tests.
            TODO: Develop tests that fire these, and also demonstrate the ways to construct a url, and a deleteURL.
            <deleteURL>${result.url.protocol}://${result.url.authority}${result.url.path} -:: ${result.protoHostPort} ::-</deleteURL>
            -->
        </test>

    </testGroup>

    <testGroup ID="debugScript">
        <test ID="selftestReturnTest">
            <method>POST</method>
            <uri>/tagonomy?mock=true</uri>
            <filename>_self_test/selftest-mutator.json</filename>
        </test>
    </testGroup>

</restReplay>
